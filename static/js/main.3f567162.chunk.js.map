{"version":3,"sources":["Icon/index.jsx","utils/index.js","Element/Control.jsx","constant/index.js","context/index.jsx","Element/TextElement.jsx","Element/ImageElement.jsx","Element/index.jsx","TextMediaEditor.jsx","example/App.jsx","index.jsx"],"names":["SvgProps","xmlns","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","ToggleIcon","props","className","active","onClick","d","UploadImage","cx","cy","r","MoveIcon","guid","prefix","Math","random","toString","substr","readImageFile","file","Promise","resolve","fileId","_id","fileReader","FileReader","onload","e","source","target","result","img","window","Image","src","name","size","width","height","url","readAsDataURL","Control","useState","setActive","uploadId","useRef","inputEle","evt","a","files","current","value","all","map","images","onUploadImage","act","htmlFor","ref","multiple","id","type","accept","onChange","DataType","text","image","KeyCode","ENTER","DELETE","EditotContext","React","createContext","useEditor","useContext","TextElement","focusId","setFocusId","cursor","setCursor","placeholder","textRef","setHeight","data","onRemove","onAddText","onMergeTextOrRemoveOtherMedia","onAddImages","useEffect","scrollHeight","offsetHeight","raw","position","focus","setSelectionRange","blur","onKeyDown","keyCode","preventDefault","selectionStart","style","undefined","onFocus","sortHandle","ImageElement","focused","removeImage","setTimeout","document","addEventListener","removeEventListener","status","stopPropagation","alt","Element","cleanConfigData","filter","item","SortableHandleIcon","SortableHandle","SortableItem","SortableElement","actions","SortableList","SortableContainer","items","index","key","TextMediaEditor","rows","length","initConfigData","config","_setConfig","setConfig","fileUploaded","fileIds","f","prevConfig","nextConfig","includes","matched","indexOf","firstRowIsText","lastRowIsText","Provider","newFirstTextRow","newRow","rowIndex","prevRow","newEmptyTextId","cursorPosition","newTextRowId","newTextRow","newConfig","forEach","push","prevNewRaw","newTextRaw","prevRowIndex","nextRow","uploadImages","onSortEnd","oldIndex","newIndex","arrayMove","useDragHandle","newLastTextRow","InitialValue","App","setValue","nextValue","console","log","callback","root","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3f567162.chunk.js","sourcesContent":["import React from 'react'\n\nconst SvgProps = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  viewBox: '0 0 24 24',\n  fill: 'none',\n  stroke: 'currentcolor',\n  strokeLinecap: 'round',\n  strokeLinejoin: 'round',\n  strokeWidth: '1',\n}\n\nexport function ToggleIcon(props) {\n  return (\n    <span className={`rtme-icon${props.active ? ' rtme-icon-active' : ''}`} onClick={props.onClick}>\n      <svg {...SvgProps}>\n        <path d=\"M17 12L7 12M12 17L12 7\" />\n      </svg>\n    </span>\n  )\n}\n\nexport function UploadImage(props) {\n  return (\n    <span className=\"rtme-icon\" onClick={props.onClick}>\n      <svg {...SvgProps}>\n        <path d=\"M8 7l.74-1.11A2 2 0 0 1 10.404 5h3.192a2 2 0 0 1 1.664.89L16 7h5v11H3V7h5z\" />\n        <circle cx=\"12\" cy=\"12\" r=\"3\" />\n      </svg>\n    </span>\n  )\n}\n\nexport function UploadVideo(props) {\n  return (\n    <span className=\"rtme-icon\" onClick={props.onClick}>\n      <svg {...SvgProps}>\n        <path strokeLinecap=\"round\" d=\"M16 10.087l5-1.578v7.997l-4.998-1.578\" />\n        <path d=\"M16 7H3v11h13z\" />\n      </svg>\n    </span>\n  )\n}\n\nexport function MoveIcon(props) {\n  return (\n    <span className=\"rtme-move-icon\" onClick={props.onClick}>\n      <svg {...SvgProps}>\n        <path d=\"M6 7L18 7M6 12L18 12M6 17L18 17\" />\n      </svg>\n    </span>\n  )\n}\n","export function guid(prefix = '') {\n  return `${prefix}_${Math.random()\n    .toString(16)\n    .substr(2, 8)}${Math.random()\n    .toString(16)\n    .substr(2, 8)}`\n}\n\nexport function setCursorPosition(target, position) {\n  if (target && target.setSelectionRange) {\n    target.setSelectionRange(position, position)\n  }\n}\n\nexport function readImageFile(file) {\n  return new Promise(function readEachFile(resolve) {\n    const fileId = guid('file')\n    // eslint-disable-next-line\n    file._id = fileId\n    const fileReader = new FileReader()\n\n    // get image base64\n    fileReader.onload = function onFileLoad(e) {\n      const source = e.target.result\n\n      const img = new window.Image()\n      img.src = source\n\n      // get image width & height\n      img.onload = function onImageLoad() {\n        resolve({\n          _id: fileId,\n          name: file.name,\n          size: file.size,\n          width: img.width,\n          height: img.height,\n          url: source,\n        })\n      }\n    }\n\n    fileReader.readAsDataURL(file)\n  })\n}\n","import React, { useRef, useState } from 'react'\n\nimport { ToggleIcon, UploadImage } from '../Icon'\nimport { readImageFile } from '../utils'\n\nfunction Control(props) {\n  const [active, setActive] = useState(false)\n  const uploadId = useRef()\n  const inputEle = useRef()\n  if (!uploadId.current) {\n    uploadId.current = `rtme-upload-${Math.random()\n      .toString(16)\n      .substr(2, 8)}`\n  }\n\n  async function uploadImageChange(evt) {\n    const files = [...evt.target.files]\n    inputEle.current.value = ''\n    setActive(false)\n    const images = await Promise.all(files.map(readImageFile))\n    props.onUploadImage(images, files)\n  }\n\n  function toggleActive() {\n    setActive(act => !act)\n  }\n\n  return (\n    <div className=\"rtme-control\">\n      <ToggleIcon active={active} onClick={toggleActive} />\n      {active && (\n        <div className=\"rtme-ctrls\">\n          <div className=\"rtme-upload\">\n            <label className=\"rtme-upload-label\" htmlFor={uploadId.current}>\n              <UploadImage />\n            </label>\n            <input\n              ref={inputEle}\n              multiple\n              id={uploadId.current}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={uploadImageChange}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Control\n","export const DataType = {\n  text: 'TEXT',\n  image: 'IMAGE',\n}\n\nexport const KeyCode = {\n  ENTER: 13,\n  DELETE: 8,\n}\n","import React, { useContext } from 'react'\n\nconst EditotContext = React.createContext()\nexport default EditotContext\n\nexport function useEditor() {\n  const context = useContext(EditotContext)\n  return context\n}\n","import React, { useEffect, useRef, useState } from 'react'\n\nimport Control from './Control'\nimport { KeyCode } from '../constant'\nimport { useEditor } from '../context'\nimport { setCursorPosition } from '../utils'\n\nfunction TextElement(props) {\n  const { focusId, setFocusId, cursor, setCursor, placeholder } = useEditor()\n  const textRef = useRef()\n  const [height, setHeight] = useState()\n  const {\n    data,\n    onChange = () => {},\n    onRemove = () => {},\n    onAddText = () => {},\n    onMergeTextOrRemoveOtherMedia = () => {},\n    onAddImages = () => {},\n  } = props\n\n  // set textarea height default 1em\n  useEffect(() => {\n    setHeight(textRef.current.scrollHeight)\n  }, [])\n\n  // auto resize textarea height to ensure textarea has not scroll\n  useEffect(() => {\n    if (textRef.current.offsetHeight !== textRef.current.scrollHeight) {\n      setHeight(textRef.current.scrollHeight)\n    }\n  }, [data.raw])\n\n  // control focus target\n  useEffect(() => {\n    if (focusId === data._id) {\n      textRef.current.focus()\n      if (cursor > -1) {\n        setCursorPosition(textRef.current, cursor)\n      }\n      // do this!!\n      setCursor()\n    } else {\n      textRef.current.blur()\n    }\n  }, [focusId, data._id, cursor, setCursor])\n\n  function focusHandler() {\n    setFocusId(data._id)\n  }\n\n  function updateText(evt) {\n    onChange({\n      ...data,\n      raw: evt.target.value,\n    })\n  }\n\n  function textKeyDownHandler(evt) {\n    // evt.persist()\n    switch (evt.keyCode) {\n      // prevent textarea paragraph wrap\n      // will create a new textarea for next paragraph\n      case KeyCode.ENTER: {\n        evt.preventDefault()\n        onAddText(data, evt.target.selectionStart)\n        break\n      }\n      // remove empty text config row after delete it\n      case KeyCode.DELETE: {\n        if (!evt.target.value) {\n          evt.preventDefault()\n          onRemove(data)\n        } else if (evt.target.selectionStart === 0) {\n          // merge with upper text or remove upper media\n          onMergeTextOrRemoveOtherMedia(data)\n        }\n        break\n      }\n      default:\n        break\n    }\n  }\n\n  return (\n    <div className=\"rtme-row\">\n      {focusId === data._id && (\n        <Control onUploadImage={(images, files) => onAddImages(images, files, data)} />\n      )}\n      <textarea\n        ref={textRef}\n        className=\"rtme-textarea\"\n        value={data.raw}\n        onChange={updateText}\n        onKeyDown={textKeyDownHandler}\n        placeholder={placeholder || 'Please Type Something'}\n        style={height ? { height } : undefined}\n        onFocus={focusHandler}\n      />\n      {props.sortHandle}\n    </div>\n  )\n}\n\nexport default TextElement\n","import React, { useEffect } from 'react'\n\nimport { KeyCode } from '../constant'\nimport { useEditor } from '../context'\n\nfunction ImageElement(props) {\n  const { focusId, setFocusId } = useEditor()\n  const { data, onRemove = () => {} } = props\n  const focused = focusId === data._id\n\n  useEffect(() => {\n    function removeImage(evt) {\n      if (evt.keyCode === KeyCode.DELETE) {\n        setFocusId()\n        onRemove(data)\n      }\n    }\n\n    if (focusId === data._id) {\n      // a bug hack\n      // enter delete key to remove text below will trigger this event\n      // guess event is persistent but comment evt.persist() is useless\n      setTimeout(() => {\n        document.addEventListener('keyup', removeImage)\n      }, 150)\n    }\n    return () => document.removeEventListener('keyup', removeImage)\n  }, [data, focusId, onRemove, setFocusId])\n\n  function focusThis(evt) {\n    evt.stopPropagation()\n    if (focusId !== data._id) {\n      setFocusId(data._id)\n    }\n  }\n\n  function cancelFocus() {\n    setFocusId()\n  }\n\n  return (\n    <div className=\"rtme-row\" onClick={cancelFocus}>\n      <div\n        className={`rtme-media-box${focused ? ' media-focused' : ''} media-upload-${data.status}`}\n        onClick={focusThis}\n      >\n        <img className=\"rtme-image\" src={data.url} alt={data.name} style={{ width: data.width }} />\n      </div>\n      {props.sortHandle}\n    </div>\n  )\n}\n\nexport default ImageElement\n","import React from 'react'\n\nimport TextElement from './TextElement'\nimport ImageElement from './ImageElement'\n\nimport { DataType } from '../constant'\n\nfunction Element(props) {\n  const { data } = props\n\n  if (data.type === DataType.text) {\n    return <TextElement {...props} />\n  }\n\n  if (data.type === DataType.image) {\n    return <ImageElement {...props} />\n  }\n\n  return null\n}\n\nexport default Element\n","import React, { useState } from 'react'\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc'\nimport arrayMove from 'array-move'\n\nimport { MoveIcon } from './Icon'\nimport Element from './Element'\nimport { guid } from './utils'\nimport { DataType } from './constant'\nimport EditorContext from './context'\n\nimport './styles/index.css'\n\nconst prefix = 'row'\n\nfunction initConfigData(rows = []) {\n  if (!rows.length) {\n    return [{ _id: guid(prefix), type: DataType.text, raw: '' }]\n  }\n  return rows.map(item => ({\n    _id: item._id || guid(prefix),\n    ...item,\n    status: item.type === DataType.image ? 'done' : 'uploading',\n  }))\n}\n\nfunction cleanConfigData(rows = []) {\n  return rows\n    .filter(item => item.raw || item.status === 'done')\n    .map(({ _id, status, ...row }) => row)\n}\n\nconst SortableHandleIcon = SortableHandle(() => <MoveIcon />)\n\nconst SortableItem = SortableElement(({ data, ...actions }) => (\n  <Element\n    data={data}\n    onChange={actions.onChange}\n    onRemove={actions.onRemove}\n    onAddText={actions.onAddText}\n    onMergeTextOrRemoveOtherMedia={actions.onMergeTextOrRemoveOtherMedia}\n    onAddImages={actions.onAddImages}\n    sortHandle={<SortableHandleIcon />}\n  />\n))\n\nconst SortableList = SortableContainer(({ items, ...actions }) => {\n  return (\n    <div>\n      {items.map((item, index) => (\n        <SortableItem index={index} key={item._id} data={{ ...item }} {...actions} />\n      ))}\n    </div>\n  )\n})\n\nfunction TextMediaEditor(props) {\n  const { onChange = () => {} } = props\n  const [focusId, setFocusId] = useState()\n  const [cursor, setCursor] = useState()\n  const [config, _setConfig] = useState(initConfigData(props.value || []))\n\n  function setConfig(rows) {\n    _setConfig(rows)\n    onChange(cleanConfigData(rows))\n  }\n\n  function updateData(newRow) {\n    const newConfig = config.map(item => {\n      if (item._id === newRow._id) {\n        return newRow\n      }\n      return item\n    })\n    setConfig(newConfig)\n  }\n\n  // remove data\n  // focus previous text row if exist\n  function removeData(data) {\n    if (config.length === 1) {\n      if (data.type === DataType.text) {\n        setConfig([{ ...data, raw: '' }])\n      } else {\n        const newEmptyTextId = guid(prefix)\n        setConfig([{ _id: newEmptyTextId, type: DataType.text, raw: '' }])\n        setFocusId(newEmptyTextId)\n      }\n      return\n    }\n\n    const rowIndex = config.map(item => item._id).indexOf(data._id)\n    const prevRow = config[rowIndex - 1]\n    setConfig(config.filter(item => item._id !== data._id))\n    if (prevRow) {\n      setFocusId(prevRow._id)\n    }\n  }\n\n  // merge two text row when enter delete key in line start\n  // or remove upper media\n  function mergeTextOrRemoveMedia(data) {\n    const rowIndex = config.map(item => item._id).indexOf(data._id)\n    const prevRow = config[rowIndex - 1]\n    if (!prevRow) {\n      return\n    }\n\n    // merge two text rows\n    if (prevRow.type === DataType.text) {\n      const newConfig = []\n      config.forEach(item => {\n        if (item._id === prevRow._id) {\n          newConfig.push({\n            ...item,\n            raw: `${item.raw}${data.raw}`,\n          })\n        } else if (item._id !== data._id) {\n          newConfig.push(item)\n        }\n      })\n      setConfig(newConfig)\n      // set cursor to prev line end\n      setCursor(prevRow.raw.length)\n      setFocusId(prevRow._id)\n    }\n\n    // remove upper media\n    // setConfig(config.filter(item => item._id !== prevRow._id))\n  }\n\n  // add a empty text\n  // or focus next empty text\n  function addText(prevRow, cursorPosition) {\n    // ignore empty text's enter key event\n    if (!prevRow.raw) {\n      return\n    }\n\n    const newTextRowId = guid(prefix)\n    const newTextRow = {\n      _id: newTextRowId,\n      type: DataType.text,\n      raw: '',\n    }\n\n    // add a text row up when cursor is in first col\n    if (cursorPosition === 0) {\n      const newConfig = []\n      config.forEach(item => {\n        if (item._id === prevRow._id) {\n          newConfig.push(newTextRow)\n        }\n        newConfig.push(item)\n      })\n      setConfig(newConfig)\n      setFocusId(newTextRowId)\n      return\n    }\n\n    // break raw\n    if (cursorPosition < prevRow.raw.length) {\n      const prevNewRaw = prevRow.raw.substr(0, cursorPosition)\n      const newTextRaw = prevRow.raw.substr(cursorPosition)\n      newTextRow.raw = newTextRaw\n      const newConfig = []\n      config.forEach(item => {\n        if (item._id === prevRow._id) {\n          newConfig.push({\n            ...item,\n            raw: prevNewRaw,\n          })\n          newConfig.push(newTextRow)\n        } else {\n          newConfig.push(item)\n        }\n      })\n      setConfig(newConfig)\n      // set cursor next line start\n      setCursor(0)\n      setFocusId(newTextRowId)\n      return\n    }\n\n    const prevRowIndex = config.map(item => item._id).indexOf(prevRow._id)\n    const nextRow = config[prevRowIndex + 1]\n    // has a empty text below\n    if (nextRow && nextRow.type === DataType.text && !nextRow.raw) {\n      setFocusId(nextRow._id)\n      return\n    }\n\n    const newConfig = []\n    config.forEach(item => {\n      newConfig.push(item)\n      if (item._id === prevRow._id) {\n        newConfig.push(newTextRow)\n      }\n    })\n    setConfig(newConfig)\n    setFocusId(newTextRowId)\n  }\n\n  function preInsert() {\n    const newFirstTextRow = {\n      _id: guid(prefix),\n      type: DataType.text,\n      raw: '',\n    }\n\n    setConfig([newFirstTextRow, ...config])\n    setFocusId(newFirstTextRow._id)\n  }\n\n  function postInsert() {\n    const newLastTextRow = {\n      _id: guid(prefix),\n      type: DataType.text,\n      raw: '',\n    }\n\n    setConfig([...config, newLastTextRow])\n    setFocusId(newLastTextRow._id)\n  }\n\n  function fileUploaded(files) {\n    const fileIds = files.map(f => f._id)\n    // must do this\n    _setConfig(prevConfig => {\n      const nextConfig = prevConfig.map(item => {\n        if (item.type === DataType.image && fileIds.includes(item._id)) {\n          const matched = files[fileIds.indexOf(item._id)]\n          return {\n            ...item,\n            url: matched.url || item.url,\n            status: matched.status,\n          }\n        }\n        return item\n      })\n      // 🤔 any good ideas\n      onChange(cleanConfigData(nextConfig))\n      return nextConfig\n    })\n  }\n\n  function addImages(images = [], files, prevRow) {\n    const newConfig = []\n    config.forEach(item => {\n      newConfig.push(item)\n      if (item._id === prevRow._id) {\n        newConfig.push(\n          ...images.map(image => ({\n            ...image,\n            type: DataType.image,\n            status: 'uploading',\n          }))\n        )\n      }\n    })\n\n    setConfig(newConfig)\n\n    if (typeof props.uploadImages === 'function') {\n      // notice: hooks callback remember current config\n      props.uploadImages(files, fileUploaded)\n    }\n  }\n\n  function onSortEnd({ oldIndex, newIndex }) {\n    setConfig(arrayMove(config, oldIndex, newIndex))\n  }\n\n  // add empty row up and down\n  const firstRowIsText = config[0] && config[0].type === DataType.text\n  const lastRowIsText =\n    config[config.length - 1] && config[config.length - 1].type === DataType.text\n\n  return (\n    <EditorContext.Provider\n      value={{ focusId, setFocusId, cursor, setCursor, placeholder: props.placeholder }}\n    >\n      <div className=\"react-text-media-editor\">\n        {!firstRowIsText && <div className=\"rtme-text-placeholder\" onClick={preInsert} />}\n        <SortableList\n          items={config}\n          onChange={updateData}\n          onRemove={removeData}\n          onAddText={addText}\n          onMergeTextOrRemoveOtherMedia={mergeTextOrRemoveMedia}\n          onAddImages={addImages}\n          onSortEnd={onSortEnd}\n          useDragHandle\n        />\n        {!lastRowIsText && <div className=\"rtme-text-placeholder\" onClick={postInsert} />}\n      </div>\n    </EditorContext.Provider>\n  )\n}\n\nexport default TextMediaEditor\n","import React, { useState } from 'react'\n\nimport Editor from '../TextMediaEditor'\nimport './main.css'\n\nconst IMAGE = 'https://picsum.photos/500/150'\n\nconst InitialValue = [\n  { type: 'TEXT', raw: 'React Text Media Editor Example' },\n  { type: 'IMAGE', url: IMAGE, name: 'Pic.png', width: 500, height: 150 },\n]\n\nfunction App() {\n  const [value, setValue] = useState(InitialValue)\n\n  function updateValue(nextValue) {\n    setValue(nextValue)\n    // eslint-disable-next-line\n    console.log(nextValue)\n  }\n\n  function uploadImages(files, callback) {\n    setTimeout(() => {\n      callback(\n        files.map(file => ({\n          status: 'done',\n          url: '',\n          _id: file._id,\n        }))\n      )\n    }, 2000)\n  }\n\n  return (\n    <div className=\"example\">\n      <h1>React Text Media Editor Example</h1>\n      <Editor\n        value={value}\n        onChange={updateValue}\n        uploadImages={uploadImages}\n        placeholder=\"Please Input Your Idea\"\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './example/App'\n\nconst root = document.getElementById('root')\n\nReactDOM.render(<App />, root)\n"],"sourceRoot":""}